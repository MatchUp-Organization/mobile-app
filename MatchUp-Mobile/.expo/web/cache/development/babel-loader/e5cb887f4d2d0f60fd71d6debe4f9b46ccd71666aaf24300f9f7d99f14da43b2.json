{"ast":null,"code":"export var isErrorWithCode = function isErrorWithCode(error) {\n  var isNewArchErrorIOS = typeof error === 'object' && error != null;\n  return (error instanceof Error || isNewArchErrorIOS) && 'code' in error;\n};","map":{"version":3,"names":["isErrorWithCode","error","isNewArchErrorIOS","Error"],"sources":["/home/alexx/MatchUp-Mobile/node_modules/@react-native-google-signin/google-signin/src/types.ts"],"sourcesContent":["/**\n * @group Original Google sign in\n * */\nexport type SignInParams = {\n  /**\n   * iOS only. The user's ID, or email address, to be prefilled in the authentication UI if possible.\n   * [See docs here](https://developers.google.com/identity/sign-in/ios/reference/Classes/GIDSignIn#-signinwithpresentingviewcontroller:hint:completion:)\n   */\n  loginHint?: string;\n};\n\n/**\n * @group Original Google sign in\n * */\nexport type ConfigureParams = {\n  /**\n   * The Google API scopes to request access to. Default is email and profile.\n   */\n  scopes?: string[];\n  /**\n   * Web client ID from Developer Console. Required for offline access.\n   */\n  webClientId?: string;\n\n  /**\n   * Must be true if you wish to access user APIs on behalf of the user from your own server.\n   *\n   * When offline access is requested, an authorization code is returned so the server can use the authorization code to exchange for a refresh token.\n   * The refresh token allows the server to access Google data when the user is not actively using the app.\n   */\n  offlineAccess?: boolean;\n\n  /**\n   * Specifies a hosted domain restriction. By setting this, authorization will be restricted to accounts of the user in the specified domain.\n   */\n  hostedDomain?: string;\n\n  /**\n   * ANDROID ONLY. Only use `true` if your server has suffered some failure and lost the user's refresh token.\n   */\n  forceCodeForRefreshToken?: boolean;\n\n  /**\n   * ANDROID ONLY. An account name that should be prioritized.\n   */\n  accountName?: string;\n\n  /**\n   * iOS ONLY\n   * The OpenID2 realm of the home web server. This allows Google to include the user's OpenID\n   * Identifier in the OpenID Connect ID token.\n   */\n  openIdRealm?: string;\n  /**\n   * iOS ONLY: The desired height and width of the profile image. Defaults to 120px\n   */\n  profileImageSize?: number;\n} & ClientIdOrPlistPath;\n\nexport type ClientIdOrPlistPath =\n  | {\n      /**\n       * If you want to specify the client ID of type iOS\n       */\n      iosClientId?: string;\n    }\n  | {\n      /**\n       * iOS only: If you want to specify a different bundle path name for the GoogleService-Info, e.g. GoogleService-Info-Staging\n       */\n      googleServicePlistPath?: string;\n    };\n\n/**\n * @group Original Google sign in\n * */\nexport type HasPlayServicesParams = {\n  /**\n   * Optional. Whether to show a dialog that promps the user to install Google Play Services,\n   * if they don't have them installed\n   */\n  showPlayServicesUpdateDialog: boolean;\n};\n\n/**\n * @group Original Google sign in\n * */\nexport type AddScopesParams = {\n  /**\n   * The Google API scopes to request access to. Default is email and profile.\n   */\n  scopes: string[];\n};\n\n/**\n * @group Original Google sign in\n * */\nexport type GetTokensResponse = {\n  idToken: string;\n  accessToken: string;\n};\n\n/**\n * @group Original Google sign in\n * */\nexport type User = {\n  user: {\n    id: string;\n    name: string | null;\n    email: string;\n    photo: string | null;\n    familyName: string | null;\n    givenName: string | null;\n  };\n  scopes: string[];\n  /**\n   * JWT (JSON Web Token) that serves as a secure credential for your user's identity.\n   */\n  idToken: string | null;\n  /**\n   * Not null only if a valid webClientId and offlineAccess: true was\n   * specified in configure().\n   */\n  serverAuthCode: string | null;\n};\n\n/**\n * @hidden\n * */\nexport interface NativeModuleError extends Error {\n  code: string;\n}\n\n/**\n * TypeScript helper to check if an object has the `code` property.\n * This is used to avoid `as` casting when you access the `code` property on errors returned by the module.\n */\nexport const isErrorWithCode = (error: any): error is NativeModuleError => {\n  // to account for https://github.com/facebook/react-native/issues/41950\n  const isNewArchErrorIOS = typeof error === 'object' && error != null;\n  return (error instanceof Error || isNewArchErrorIOS) && 'code' in error;\n};\n"],"mappings":"AAyIA,OAAO,IAAMA,eAAe,GAAI,SAAnBA,eAAeA,CAAIC,KAAU,EAAiC;EAEzE,IAAMC,iBAAiB,GAAG,OAAOD,KAAK,KAAK,QAAQ,IAAIA,KAAK,IAAI,IAAI;EACpE,OAAO,CAACA,KAAK,YAAYE,KAAK,IAAID,iBAAiB,KAAK,MAAM,IAAID,KAAK;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}