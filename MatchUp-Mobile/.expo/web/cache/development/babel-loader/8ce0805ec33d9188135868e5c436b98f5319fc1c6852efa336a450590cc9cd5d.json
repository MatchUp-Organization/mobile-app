{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"language\", \"loginHint\", \"selectAccount\", \"extraParams\", \"clientSecret\"],\n  _excluded2 = [\"extraParams\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as Application from 'expo-application';\nimport { useEffect, useMemo, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useAuthRequestResult, useLoadedAuthRequest } from \"../AuthRequestHooks\";\nimport { AuthRequest, generateHexStringAsync, makeRedirectUri, Prompt, ResponseType } from \"../AuthSession\";\nimport { AccessTokenRequest } from \"../TokenRequest\";\nimport { applyRequiredScopes, invariantClientId } from \"./ProviderUtils\";\nvar settings = {\n  windowFeatures: {\n    width: 515,\n    height: 680\n  },\n  minimumScopes: ['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n};\nexport var discovery = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo'\n};\nvar GoogleAuthRequest = function (_AuthRequest) {\n  _inherits(GoogleAuthRequest, _AuthRequest);\n  var _super = _createSuper(GoogleAuthRequest);\n  function GoogleAuthRequest(_ref) {\n    var language = _ref.language,\n      loginHint = _ref.loginHint,\n      selectAccount = _ref.selectAccount,\n      _ref$extraParams = _ref.extraParams,\n      extraParams = _ref$extraParams === void 0 ? {} : _ref$extraParams,\n      clientSecret = _ref.clientSecret,\n      config = _objectWithoutProperties(_ref, _excluded);\n    _classCallCheck(this, GoogleAuthRequest);\n    var inputParams = _objectSpread({}, extraParams);\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = Prompt.SelectAccount;\n    var scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    var isImplicit = config.responseType === ResponseType.Token || config.responseType === ResponseType.IdToken;\n    if (isImplicit) {\n      config.usePKCE = false;\n    }\n    var inputClientSecret;\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      inputClientSecret = clientSecret;\n    }\n    return _super.call(this, _objectSpread(_objectSpread({}, config), {}, {\n      clientSecret: inputClientSecret,\n      scopes: scopes,\n      extraParams: inputParams\n    }));\n  }\n  _createClass(GoogleAuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: (function () {\n      var _getAuthRequestConfigAsync = _asyncToGenerator(function* () {\n        var _yield$_get$call = yield _get(_getPrototypeOf(GoogleAuthRequest.prototype), \"getAuthRequestConfigAsync\", this).call(this),\n          _yield$_get$call$extr = _yield$_get$call.extraParams,\n          extraParams = _yield$_get$call$extr === void 0 ? {} : _yield$_get$call$extr,\n          config = _objectWithoutProperties(_yield$_get$call, _excluded2);\n        if (config.responseType === ResponseType.IdToken && !extraParams.nonce && !this.nonce) {\n          if (!this.nonce) {\n            this.nonce = yield generateHexStringAsync(16);\n          }\n          extraParams.nonce = this.nonce;\n        }\n        return _objectSpread(_objectSpread({}, config), {}, {\n          extraParams: extraParams\n        });\n      });\n      function getAuthRequestConfigAsync() {\n        return _getAuthRequestConfigAsync.apply(this, arguments);\n      }\n      return getAuthRequestConfigAsync;\n    }())\n  }]);\n  return GoogleAuthRequest;\n}(AuthRequest);\nexport function useIdTokenAuthRequest(config) {\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isWebAuth = Platform.OS === 'web';\n  return useAuthRequest(_objectSpread(_objectSpread({}, config), {}, {\n    responseType: !config.clientSecret && isWebAuth ? ResponseType.IdToken : undefined\n  }), _objectSpread({}, redirectUriOptions));\n}\nexport function useAuthRequest() {\n  var _config$scopes;\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var clientId = useMemo(function () {\n    var _config$propertyName;\n    var propertyName = Platform.select({\n      ios: 'iosClientId',\n      android: 'androidClientId',\n      default: 'webClientId'\n    });\n    var clientId = (_config$propertyName = config[propertyName]) != null ? _config$propertyName : config.clientId;\n    invariantClientId(propertyName, clientId, 'Google');\n    return clientId;\n  }, [config.expoClientId, config.iosClientId, config.androidClientId, config.webClientId, config.clientId]);\n  var responseType = useMemo(function () {\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n    var isInstalledApp = Platform.OS !== 'web';\n    if (config.clientSecret || isInstalledApp) {\n      return ResponseType.Code;\n    }\n    return ResponseType.Token;\n  }, [config.responseType, config.clientSecret]);\n  var redirectUri = useMemo(function () {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n    return makeRedirectUri(_objectSpread({\n      native: `${Application.applicationId}:/oauthredirect`\n    }, redirectUriOptions));\n  }, [config.redirectUri, redirectUriOptions]);\n  var extraParams = useMemo(function () {\n    var output = config.extraParams ? _objectSpread({}, config.extraParams) : {};\n    if (config.language) {\n      output.hl = output.language;\n    }\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n    if (config.selectAccount) {\n      output.prompt = Prompt.SelectAccount;\n    }\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n  var request = useLoadedAuthRequest(_objectSpread(_objectSpread({}, config), {}, {\n    responseType: responseType,\n    extraParams: extraParams,\n    clientId: clientId,\n    redirectUri: redirectUri\n  }), discovery, GoogleAuthRequest);\n  var _useAuthRequestResult = useAuthRequestResult(request, discovery, {\n      windowFeatures: settings.windowFeatures\n    }),\n    _useAuthRequestResult2 = _slicedToArray(_useAuthRequestResult, 2),\n    result = _useAuthRequestResult2[0],\n    promptAsync = _useAuthRequestResult2[1];\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    fullResult = _useState2[0],\n    setFullResult = _useState2[1];\n  var shouldAutoExchangeCode = useMemo(function () {\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n    return (result == null ? void 0 : result.type) === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result == null ? void 0 : result.type]);\n  useEffect(function () {\n    var isMounted = true;\n    if (shouldAutoExchangeCode && (result == null ? void 0 : result.type) === 'success') {\n      var exchangeRequest = new AccessTokenRequest({\n        clientId: clientId,\n        clientSecret: config.clientSecret,\n        redirectUri: redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: (request == null ? void 0 : request.codeVerifier) || ''\n        }\n      });\n      exchangeRequest.performAsync(discovery).then(function (authentication) {\n        if (isMounted) {\n          setFullResult(_objectSpread(_objectSpread({}, result), {}, {\n            params: _objectSpread({\n              id_token: (authentication == null ? void 0 : authentication.idToken) || '',\n              access_token: authentication.accessToken\n            }, result.params),\n            authentication: authentication\n          }));\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n    return function () {\n      isMounted = false;\n    };\n  }, [clientId, redirectUri, shouldAutoExchangeCode, config.clientSecret, (_config$scopes = config.scopes) == null ? void 0 : _config$scopes.join(','), request == null ? void 0 : request.codeVerifier, result]);\n  return [request, fullResult, promptAsync];\n}","map":{"version":3,"names":["Application","useEffect","useMemo","useState","Platform","useAuthRequestResult","useLoadedAuthRequest","AuthRequest","generateHexStringAsync","makeRedirectUri","Prompt","ResponseType","AccessTokenRequest","applyRequiredScopes","invariantClientId","settings","windowFeatures","width","height","minimumScopes","discovery","authorizationEndpoint","tokenEndpoint","revocationEndpoint","userInfoEndpoint","GoogleAuthRequest","_AuthRequest","_inherits","_super","_createSuper","_ref","language","loginHint","selectAccount","_ref$extraParams","extraParams","clientSecret","config","_objectWithoutProperties","_excluded","_classCallCheck","inputParams","_objectSpread","hl","login_hint","prompt","SelectAccount","scopes","isImplicit","responseType","Token","IdToken","usePKCE","inputClientSecret","Code","call","_createClass","key","value","_getAuthRequestConfigAsync","_asyncToGenerator","_yield$_get$call","_get","_getPrototypeOf","prototype","_yield$_get$call$extr","_excluded2","nonce","getAuthRequestConfigAsync","apply","arguments","useIdTokenAuthRequest","redirectUriOptions","length","undefined","isWebAuth","OS","useAuthRequest","_config$scopes","clientId","_config$propertyName","propertyName","select","ios","android","default","expoClientId","iosClientId","androidClientId","webClientId","isInstalledApp","redirectUri","native","applicationId","output","request","_useAuthRequestResult","_useAuthRequestResult2","_slicedToArray","result","promptAsync","_useState","_useState2","fullResult","setFullResult","shouldAutoExchangeCode","type","params","code","authentication","isMounted","exchangeRequest","code_verifier","codeVerifier","performAsync","then","id_token","idToken","access_token","accessToken","join"],"sources":["/home/alexx/MatchUp-Mobile/node_modules/expo-auth-session/src/providers/Google.ts"],"sourcesContent":["import * as Application from 'expo-application';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport { useAuthRequestResult, useLoadedAuthRequest } from '../AuthRequestHooks';\nimport {\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  DiscoveryDocument,\n  generateHexStringAsync,\n  makeRedirectUri,\n  Prompt,\n  ResponseType,\n} from '../AuthSession';\nimport { AccessTokenRequest } from '../TokenRequest';\nimport { ProviderAuthRequestConfig } from './Provider.types';\nimport { applyRequiredScopes, invariantClientId } from './ProviderUtils';\n\nconst settings = {\n  windowFeatures: { width: 515, height: 680 },\n  minimumScopes: [\n    'openid',\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email',\n  ],\n};\n\nexport const discovery: DiscoveryDocument = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo',\n};\n\n// @needsAudit\n/**\n * @deprecated See [Google authentication](/guides/google-authentication/).\n */\nexport interface GoogleAuthRequestConfig extends ProviderAuthRequestConfig {\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * When `true`, the service will allow the user to switch between accounts (if possible).\n   * @default false.\n   */\n  selectAccount?: boolean;\n  /**\n   * Proxy client ID for use in the Expo client on Android and iOS.\n   */\n  expoClientId?: string;\n  /**\n   * Expo web client ID for use in the browser.\n   */\n  webClientId?: string;\n  /**\n   * iOS native client ID for use in standalone, bare workflow, and custom clients.\n   */\n  iosClientId?: string;\n  /**\n   * Android native client ID for use in standalone, and bare workflow.\n   */\n  androidClientId?: string;\n  /**\n   * Should the hook automatically exchange the response code for an authentication token.\n   *\n   * Defaults to `true` on installed apps (Android, iOS) when `ResponseType.Code` is used (default).\n   */\n  shouldAutoExchangeCode?: boolean;\n  /**\n   * Language code ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   */\n  language?: string;\n}\n\n// @needsAudit\n/**\n * Extends [`AuthRequest`](#authrequest) and accepts [`GoogleAuthRequestConfig`](#googleauthrequestconfig) in the constructor.\n */\nclass GoogleAuthRequest extends AuthRequest {\n  nonce?: string;\n\n  constructor({\n    language,\n    loginHint,\n    selectAccount,\n    extraParams = {},\n    clientSecret,\n    ...config\n  }: GoogleAuthRequestConfig) {\n    const inputParams = {\n      ...extraParams,\n    };\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = Prompt.SelectAccount;\n\n    // Apply the default scopes\n    const scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    const isImplicit =\n      config.responseType === ResponseType.Token || config.responseType === ResponseType.IdToken;\n    if (isImplicit) {\n      // PKCE must be disabled in implicit mode.\n      config.usePKCE = false;\n    }\n    let inputClientSecret: string | undefined;\n    //  Google will throw if you attempt to use the client secret\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      // TODO: maybe warn that you shouldn't store the client secret on the client\n      inputClientSecret = clientSecret;\n    }\n    super({\n      ...config,\n      clientSecret: inputClientSecret,\n      scopes,\n      extraParams: inputParams,\n    });\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    const { extraParams = {}, ...config } = await super.getAuthRequestConfigAsync();\n    if (config.responseType === ResponseType.IdToken && !extraParams.nonce && !this.nonce) {\n      if (!this.nonce) {\n        this.nonce = await generateHexStringAsync(16);\n      }\n      extraParams.nonce = this.nonce;\n    }\n    return {\n      ...config,\n      extraParams,\n    };\n  }\n}\n\n/**\n * Load an authorization request with an ID Token for authentication with Firebase.\n *\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * The id token can be retrieved with `response.params.id_token`.\n *\n * - [Get Started](https://docs.expo.dev/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useIdTokenAuthRequest(\n  config: Partial<GoogleAuthRequestConfig>,\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const isWebAuth = Platform.OS === 'web';\n\n  return useAuthRequest(\n    {\n      ...config,\n      responseType:\n        // If the client secret is provided then code can be used\n        !config.clientSecret &&\n        // When web auth is used, we can request the `id_token` directly without exchanging a code.\n        isWebAuth\n          ? ResponseType.IdToken\n          : undefined,\n    },\n    { ...redirectUriOptions }\n  );\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes, then the response will be fulfilled.\n *\n * - [Get Started](https://docs.expo.dev/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useAuthRequest(\n  config: Partial<GoogleAuthRequestConfig> = {},\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const clientId = useMemo((): string => {\n    const propertyName = Platform.select({\n      ios: 'iosClientId',\n      android: 'androidClientId',\n      default: 'webClientId',\n    });\n\n    const clientId = config[propertyName as any] ?? config.clientId;\n    invariantClientId(propertyName, clientId, 'Google');\n    return clientId;\n  }, [\n    config.expoClientId,\n    config.iosClientId,\n    config.androidClientId,\n    config.webClientId,\n    config.clientId,\n  ]);\n\n  const responseType = useMemo(() => {\n    // Allow overrides.\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n    // You can only use `response_token=code` on installed apps (iOS, Android without proxy).\n    // Installed apps can auto exchange without a client secret and get the token and id-token (Firebase).\n    const isInstalledApp = Platform.OS !== 'web';\n    // If the user provided the client secret (they shouldn't!) then use code exchange by default.\n    if (config.clientSecret || isInstalledApp) {\n      return ResponseType.Code;\n    }\n    // This seems the most pragmatic option since it can result in a full authentication on web and proxy platforms as expected.\n    return ResponseType.Token;\n  }, [config.responseType, config.clientSecret]);\n\n  const redirectUri = useMemo((): string => {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return makeRedirectUri({\n      native: `${Application.applicationId}:/oauthredirect`,\n      ...redirectUriOptions,\n      // native: `com.googleusercontent.apps.${guid}:/oauthredirect`,\n    });\n  }, [config.redirectUri, redirectUriOptions]);\n\n  const extraParams = useMemo((): GoogleAuthRequestConfig['extraParams'] => {\n    const output = config.extraParams ? { ...config.extraParams } : {};\n\n    if (config.language) {\n      output.hl = output.language;\n    }\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n    if (config.selectAccount) {\n      output.prompt = Prompt.SelectAccount;\n    }\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n\n  const request = useLoadedAuthRequest(\n    {\n      ...config,\n      responseType,\n      extraParams,\n      clientId,\n      redirectUri,\n    },\n    discovery,\n    GoogleAuthRequest\n  );\n\n  const [result, promptAsync] = useAuthRequestResult(request, discovery, {\n    windowFeatures: settings.windowFeatures,\n  });\n\n  const [fullResult, setFullResult] = useState<AuthSessionResult | null>(null);\n\n  const shouldAutoExchangeCode = useMemo(() => {\n    // allow overrides\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n\n    // has a code to exchange and doesn't have an authentication yet.\n    return result?.type === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result?.type]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (shouldAutoExchangeCode && result?.type === 'success') {\n      const exchangeRequest = new AccessTokenRequest({\n        clientId,\n        clientSecret: config.clientSecret,\n        redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: request?.codeVerifier || '',\n        },\n      });\n      exchangeRequest.performAsync(discovery).then((authentication) => {\n        if (isMounted) {\n          setFullResult({\n            ...result,\n            params: {\n              id_token: authentication?.idToken || '',\n              access_token: authentication.accessToken,\n              ...result.params,\n            },\n            authentication,\n          });\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    clientId,\n    redirectUri,\n    shouldAutoExchangeCode,\n    config.clientSecret,\n    config.scopes?.join(','),\n    request?.codeVerifier,\n    result,\n  ]);\n\n  return [request, fullResult, promptAsync];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}